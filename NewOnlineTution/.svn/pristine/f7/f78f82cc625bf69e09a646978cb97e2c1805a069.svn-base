package com.itpanda.tution.controller;

import org.omg.CORBA.UserException;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.itpanda.tution.Constant;
import com.itpanda.tution.loginSecurity.entity.User;
import com.itpanda.tution.loginSecurity.repository.UserRepository;
import com.itpanda.tution.model.UserDTO;
import com.itpanda.tution.model.UserModel;
import com.itpanda.tution.service.StudentService;


@Controller
public class StudentController {
	
@Autowired
private StudentService studentService;

@Autowired
private UserRepository userRepository;

// save new student
@RequestMapping(value = "/savestudent", method = RequestMethod.POST)
public String saveStudent(@ModelAttribute("user") UserModel userModel) {
	User user=new User();
	
	// copy user model object to user object
	BeanUtils.copyProperties(userModel, user);
	
	user.setUserType(Constant.USER_TYPE_STUDENT);
	user.setPassword(passGenerator(userModel.getPassword()));
	user.setEnabled(true);
	
	
	studentService.saveStudent(user);
	
	return "redirect:/";
}

@RequestMapping(value = "/updateprofile/student", method = RequestMethod.POST)
public String editProfile(@ModelAttribute("user") User user) {
	String password = user.getPassword();
	
	
	// get authenticated user details
	Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	UserDTO u = (UserDTO) authentication.getPrincipal();
	
	user.setId(u.getId());
	user.setUserType(Constant.USER_TYPE_STUDENT);
	user.setEnabled(true);
	
	
	

	// check password
	if (password.equals("")) {
		// currnt password
		user.setPassword(u.getPassword());

	} else {
		// new password
		user.setPassword(passGenerator(password));
	}

	userRepository.save(user);
	return "wall";
}

//for encode a string

public String passGenerator(String password) {
	BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder(4);
	return bCryptPasswordEncoder.encode(password);
}
}
