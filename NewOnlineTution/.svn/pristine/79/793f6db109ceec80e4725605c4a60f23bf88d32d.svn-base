package com.itpanda.tution.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.tomcat.util.http.fileupload.IOUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.MailException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.itpanda.tution.Constant;
import com.itpanda.tution.SendEmail;
import com.itpanda.tution.entity.Banks;
import com.itpanda.tution.entity.ClassJoin;
import com.itpanda.tution.entity.Classes;
import com.itpanda.tution.entity.Teacher;
import com.itpanda.tution.entity.TeacherPayments;
import com.itpanda.tution.loginSecurity.entity.User;
import com.itpanda.tution.loginSecurity.repository.UserRepository;
import com.itpanda.tution.model.ClassJoinModel;
import com.itpanda.tution.model.ClassModel;
import com.itpanda.tution.model.PaymentNotify;
import com.itpanda.tution.model.TeacherModel;
import com.itpanda.tution.model.TeacherPaymentModel;
import com.itpanda.tution.model.UserDTO;
import com.itpanda.tution.repository.BankRepository;
import com.itpanda.tution.repository.ClassJoinRepository;
import com.itpanda.tution.repository.TeacherPaymentsRepository;
import com.itpanda.tution.service.ClassJoinService;
import com.itpanda.tution.service.ClassService;
import com.itpanda.tution.service.TeacherService;
import com.itpanda.tution.util.DataLoader;
import com.itpanda.tution.util.TimeFormattor;

@Controller
public class PaymentController {

	@Autowired
	private ClassJoinService classJoinService;

	@Autowired
	private TeacherService teacherService;

	@Autowired
	private ClassService classService;

	@Autowired
	private UserRepository userRepository;

	@Autowired
	BankRepository bankRepository;

	@Autowired
	private TeacherPaymentsRepository teacherPaymentsRepository;

	TimeFormattor timeFormattor = new TimeFormattor();

	@Autowired
	SendEmail sendEmail;

	// TODO change to use ClassJoinService
	@Autowired
	ClassJoinRepository classJoinRepository;
	
	DataLoader dataLoader=new DataLoader();

	@Value("${onlinetution.bankslip.derectrory}")
	String UPLOAD_DIR;

	// load payment page
	@RequestMapping("/payment")
	public String payment() {
		return "payment";
	}

	@CrossOrigin
	@RequestMapping(value = "/paymentNotify", method = RequestMethod.POST)
	public String getPaymentParams(@ModelAttribute("paymentNotify") PaymentNotify paymentNotify) {
		System.out.println("******************" + paymentNotify.getPayment_id());

		// return "redirect:/";
		///////////////////
		try {
			// send email

			// sendEmail.sendEmail(u.getUsername(), userName);

			if (paymentNotify.getOrder_id() != null) {
				int clJoinId = Integer.parseInt(paymentNotify.getOrder_id());
				// save payment details
				classJoinService.updateClassJoin("complete", "online payed", clJoinId);

				// Send Emali TODO Test email sending
				Optional<ClassJoin> classJoinDetails;
				Optional<Classes> classDetails;
				classJoinDetails = classJoinRepository.findById(clJoinId);
				classDetails = Optional
						.ofNullable(classService.getClassByClassId(classJoinDetails.get().getClasses().getClassId()));
				// TODO change code properly
				sendEmail.sendEmail(
						userRepository.findById(classJoinDetails.get().getUser().getId()).get().getUsername(),
						userRepository.findById(classJoinDetails.get().getUser().getId()).get().getFirstName(),
						classDetails.get().getJoinUrl());

			}

		} catch (MailException e) {
			System.out.println(e.getMessage());
		}

		// return "redirect:/wall";
		////////////////////////

		/// return "redirect:/findClass";
		return "/";
	}

	// bank deposit functions
	@SuppressWarnings("unchecked")
	// ------------------------------------------------------------------------------------------------------->
	@RequestMapping("/bankslips")
	public String classRequset(Model model,HttpSession session) {

		List<ClassJoinModel> pendingSlipLsit = new ArrayList<ClassJoinModel>();
		List<Classes> classList = new ArrayList<Classes>();
		List<ClassModel> classModelList = new ArrayList<ClassModel>();
		List<String> selectedParam = new ArrayList<String>();

		// get authenticated user details
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		UserDTO u = (UserDTO) authentication.getPrincipal();

		// get all classes
		
		
		if(session.getAttribute("classList")!=null) {
			classModelList=(List<ClassModel>) session.getAttribute("classList");
		}else {
			classList = classService.findAllClasses();
			session.setAttribute("classList", dataLoader.copyClassesToClassModel(classList));
			classModelList=dataLoader.copyClassesToClassModel(classList);
		}
		

		if (classModelList.size() > 0) {

			

			if (u.getUserType().equals(Constant.USER_TYPE_ADMIN)
					|| u.getUserType().equals(Constant.USER_TYPE_DATA_ENTRY)) {

				
				if(session.getAttribute("teacherList")!=null) {
					model.addAttribute("teacherModelList", session.getAttribute("teacherList"));
				}else {
					List<User> userList = teacherService.findTeachers(Constant.USER_TYPE_TEACHER);
					session.setAttribute("teacherList", dataLoader.getAllTeachers(userList));
					model.addAttribute("teacherModelList", dataLoader.getAllTeachers(userList));
				}
				
				model.addAttribute("pendingSlipLsit", pendingSlipLsit);
				model.addAttribute("classList", classModelList);
				model.addAttribute("selectedParam", selectedParam);
				return "admin";
			} else {
				return "redirect:login";
			}

		} else {
			return "redirect:errorpage?statuscode=500";
		}

	}

	@SuppressWarnings("unchecked")
	@RequestMapping("/filterslips")
	public String filterBankSlips(@RequestParam("status") String status, @RequestParam("teacherId") int teacherId,
			@RequestParam("classId") int classId, Model model,HttpSession session) {

		String selectedTeacher;
		String selectedClass;
		ClassJoinModel classJoinModel = null;
		List<ClassJoinModel> pendingSlipLsit = new ArrayList<ClassJoinModel>();

		List<Classes> classList = new ArrayList<Classes>();
		List<ClassModel> classModelList = new ArrayList<ClassModel>();

		List<String> selectedParam = new ArrayList<String>();

		selectedParam.add(status);
		selectedParam.add(String.valueOf(teacherId));
		selectedParam.add(String.valueOf(classId));

		// get authenticated user details
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		UserDTO u = (UserDTO) authentication.getPrincipal();

		// check status

		if (status.equals("all")) {
			status = "";
		}

		// check teacher
		if (teacherId == 0) {
			selectedTeacher = "";
		} else {
			selectedTeacher = String.valueOf(teacherId);
		}
		// check class
		if (classId == 0) {
			selectedClass = "";
		} else {
			selectedClass = String.valueOf(classId);
		}

		if(session.getAttribute("classList")!=null) {
			classModelList=(List<ClassModel>) session.getAttribute("classList");
		}else {
			classList = classService.findAllClasses();
			session.setAttribute("classList", dataLoader.copyClassesToClassModel(classList));
			classModelList=dataLoader.copyClassesToClassModel(classList);
		}
		

		if (u.getUserType().equals(Constant.USER_TYPE_ADMIN) || u.getUserType().equals(Constant.USER_TYPE_DATA_ENTRY)) {
			// filter

			// for temp search--//
			List<ClassJoin> bankSlips = classJoinService.filterBankSlips(Constant.Cl_JOIN_TYPE_BANK_DEPOSIT, status,
					teacherId, classId);
			// ------------//

			Optional<User> user = null;
			List<Classes> classes = null;
			List<Teacher> teacher = null;

			for (int i = 0; i < bankSlips.size(); i++) {
				classJoinModel = new ClassJoinModel();
				user = userRepository.findById(bankSlips.get(i).getUser().getId());
				classes = classService.getClassById(bankSlips.get(i).getClasses().getClassId());
				
			
				teacher = teacherService.getTeacherById(classes.get(0).getTeacher().getTeacherId());

				BeanUtils.copyProperties(bankSlips.get(i), classJoinModel);

				// classJoinModel.setClJoinId(bankSlips.get(i).getClJoinId());
				classJoinModel.setStudentName(
						user.get().getFirstName() + " " + user.get().getMiddlName() + " " + user.get().getLastName());
				// classJoinModel.setBankSlip(bankSlips.get(i).getBankSlip());
				if(bankSlips.get(i).getPaymentDate()!=null){
					classJoinModel.setDate(timeFormattor.dateToString(bankSlips.get(i).getPaymentDate()));
				}else {
					classJoinModel.setDate("");
				}
				
				classJoinModel.setClassName(
						classes.get(0).getDescriptionEnglish() + " / " + classes.get(0).getDescriptionSinhala());
				// classJoinModel.setAmmount(bankSlips.get(i).getAmmount());
				// classJoinModel.setStatus(bankSlips.get(i).getStatus());

				pendingSlipLsit.add(classJoinModel);

			}


			if(session.getAttribute("teacherList")!=null) {
				model.addAttribute("teacherModelList", session.getAttribute("teacherList"));
			}else {
				List<User> userList = teacherService.findTeachers(Constant.USER_TYPE_TEACHER);
				session.setAttribute("teacherList", dataLoader.getAllTeachers(userList));
				model.addAttribute("teacherModelList", dataLoader.getAllTeachers(userList));
			}
			model.addAttribute("classList", classModelList);
			model.addAttribute("pendingSlipLsit", pendingSlipLsit);
			model.addAttribute("selectedParam", selectedParam);
			return "admin";
		} else {
			return "redirect:login";
		}

	}

	// View Slip
	@RequestMapping(value = "/displayslip", method = RequestMethod.GET)
	public @ResponseBody void affichimage(@RequestParam("bankSlip") String bankSlip, HttpServletResponse response,
			HttpServletRequest request) throws IOException, NullPointerException {

		// get file extension from file name
		String slipType = bankSlip.split("\\.")[1];

		if (slipType.equals("pdf")) {

			response.setContentType("application/pdf");

			InputStream inputStream = new FileInputStream(new File(UPLOAD_DIR + bankSlip));
			int nRead;
			while ((nRead = inputStream.read()) != -1) {
				response.getWriter().write(nRead);
			}

		} else {
			File imageFile = new File(UPLOAD_DIR + bankSlip);
			response.setContentType("image/jpeg");
			InputStream in = new FileInputStream(imageFile);
			IOUtils.copy(in, response.getOutputStream());
		}

	}


	@GetMapping("/paymentlist/{id}")
	public String paymentList(@PathVariable("id") Long userId, Model model) {

		
		// get authenticated user details
				Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
				UserDTO u = (UserDTO) authentication.getPrincipal();
		//List<User> user = userRepository.findUserById(userId);
		TeacherPaymentModel teacherPaymentModel;
		List<TeacherPaymentModel> teacherPaymentModelList = new ArrayList<TeacherPaymentModel>();
		int teacherId = 0;
		float totalErned = 0;
		int numberofJoined = 0;
		float totalShare = 0;
		int numberOfPayments = 0;
		float totalPaid = 0;
		float balance = 0;
		float instituteCharge = 0;

		if (u!=null ) {
			Teacher teacher = new Teacher();
			
			if(u.getUser().getUserType()==Constant.USER_TYPE_TEACHER) {
				BeanUtils.copyProperties(u.getUser().getTeacher(), teacher);
				teacherId = u.getUser().getTeacher().getTeacherId();
			}else {
				Optional<User> user=userRepository.findById(userId);
				teacherId=user.get().getTeacher().getTeacherId();
				
			}
			
			
			List<TeacherPayments> teacherPaymentList = teacherPaymentsRepository
					.findByTeacher_TeacherIdOrderByDateDesc(teacherId);

			for (int i = 0; i < teacherPaymentList.size(); i++) {
				teacherPaymentModel = new TeacherPaymentModel();
				BeanUtils.copyProperties(teacherPaymentList.get(i), teacherPaymentModel);
				teacherPaymentModel.setDate(timeFormattor.dateToString(teacherPaymentList.get(i).getDate()));
				teacherPaymentModel.setTeacherId(teacherPaymentList.get(i).getTeacher().getTeacherId());

				teacherPaymentModelList.add(teacherPaymentModel);

			}

			numberofJoined = classJoinService.countJoinedStudents(Constant.CL_JOIN_STATUS_COMPLETE, teacherId);

			if (numberofJoined != 0) {
				// sum of all classes amounts
				totalErned = classJoinService.getSumOfamount(Constant.CL_JOIN_STATUS_COMPLETE, teacherId);
				// calculate teacher's share
				totalShare = (totalErned * (100 - teacher.getInsChargePercentage())) / 100;
				instituteCharge = (totalErned * teacher.getInsChargePercentage()) / 100;
				numberOfPayments = teacherPaymentsRepository.countNumberofPayments(teacherId);

				if (numberOfPayments != 0) {
					// sum of paid payments
					totalPaid = teacherPaymentsRepository.getSumOfPayments(teacherId);
				}
				// calculate balance to pay
				balance = totalShare - totalPaid;

			}

			model.addAttribute("teacherPaymentList", teacherPaymentModelList);
			model.addAttribute("userId", userId);
			model.addAttribute("totalErned", totalErned);
			model.addAttribute("totalShare", totalShare);
			model.addAttribute("totalPaid", totalPaid);
			model.addAttribute("balance", balance);
			model.addAttribute("instituteCharge", instituteCharge);
			return "paymentList";
		} else {
			return "redirect:errorpage?statuscode=500";
		}

	}

	@GetMapping("/newpayment/{id}")
	public String newPayment(@PathVariable("id") Long userId, Model model) {

		List<User> user = userRepository.findUserById(userId);

		TeacherPaymentModel teacherPayments = new TeacherPaymentModel();
		Teacher teacher = user.get(0).getTeacher();

		if (user.size() > 0) {

			teacherPayments.setTeacherId(teacher.getTeacherId());
			if (teacher.getBanks() != null) {
				teacherPayments.setBank(teacher.getBanks().getBankName());
				teacherPayments.setBranch(teacher.getBranch());
				teacherPayments.setAccountNumber(teacher.getAccountNumber());
				// model.addAttribute("teacher", teacher);
				model.addAttribute("teacherPayments", teacherPayments);
				return "newPayment";

			} else {

				return "redirect:/paymentlist/" + userId + "?message=error";
			}

		} else {
			return "redirect:errorpage?statuscode=500";
		}

	}

	@RequestMapping(value = "/saveteacherpayment", method = RequestMethod.POST)
	public String saveTeacherPayment(@ModelAttribute("teacherPayments") TeacherPaymentModel teacherPaymentModel) {

		List<Teacher> teacher = teacherService.getTeacherById(teacherPaymentModel.getTeacherId());
		TeacherPayments teacherPayments = new TeacherPayments();
		Teacher newTeacher = new Teacher();

		if (teacher.size() > 0) {
			try {
				BeanUtils.copyProperties(teacherPaymentModel, teacherPayments);
				newTeacher.setTeacherId(teacherPaymentModel.getTeacherId());
				teacherPayments.setTeacher(newTeacher);
				teacherPayments.setDate(timeFormattor.stringToDate(teacherPaymentModel.getDate()));

				teacherPaymentsRepository.save(teacherPayments);
				return "redirect:/paymentlist/" + teacher.get(0).getUser().getId() + "?payment=success";
			} catch (Exception e) {
				System.out.println("teacher payment save :" + e);
				return "redirect:/newpayment/" + teacher.get(0).getUser().getId() + "?payment=error";
			}
		} else {
			return "redirect:errorpage?statuscode=500";
		}

	}

	@GetMapping("/bankdetails/{id}")
	public String getBankDetails(@PathVariable(name = "id") Long id, Model model) {

		TeacherModel teacherModel = new TeacherModel();
		List<Banks> bankList = new ArrayList<Banks>();
		
		// get authenticated user details
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		UserDTO u = (UserDTO) authentication.getPrincipal();

		if (u!=null) {

			bankList = bankRepository.findAll();

			if (bankList.size() > 0) {

				
			  BeanUtils.copyProperties(u.getUser().getTeacher().getBanks(), teacherModel);
				
				BeanUtils.copyProperties(u.getUser(), teacherModel);
				BeanUtils.copyProperties(u.getUser().getTeacher(), teacherModel);

				model.addAttribute("teacher", teacherModel);
				model.addAttribute("bankList", bankList);

				return "teacherBankDetails";

			} else {
				return "redirect:/login";
			}

		} else {
			return "redirect:errorpage?statuscode=500";
		}

	}

}
