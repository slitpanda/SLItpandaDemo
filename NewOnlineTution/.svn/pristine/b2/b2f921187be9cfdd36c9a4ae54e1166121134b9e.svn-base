package com.itpanda.tution.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.tomcat.util.http.fileupload.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.MailException;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StreamUtils;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.itpanda.tution.SendEmail;
import com.itpanda.tution.entity.ClassCategory;
import com.itpanda.tution.entity.ClassJoin;
import com.itpanda.tution.entity.Classes;
import com.itpanda.tution.entity.Subject;
import com.itpanda.tution.entity.Teacher;
import com.itpanda.tution.loginSecurity.entity.User;
import com.itpanda.tution.loginSecurity.repository.UserRepository;
import com.itpanda.tution.model.ClassJoinModel;
import com.itpanda.tution.model.TeacherModel;
import com.itpanda.tution.model.UserDTO;
import com.itpanda.tution.repository.TeacherRepository;
import com.itpanda.tution.service.ClassJoinService;
import com.itpanda.tution.service.ClassService;

import com.itpanda.tution.service.TeacherService;


import ch.qos.logback.classic.Logger;

@Controller
public class ClassController {

	@Autowired
	private TeacherService teacherService;

	@Autowired
	private ClassService classService;

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private ClassJoinService classJoinService;

	@Autowired
	SendEmail sendEmail;
	
	@Value("${onlinetution.bankslip.derectrory}")
	String UPLOAD_DIR;

	// load add class html file
	@RequestMapping("/addnewclass")
	public String addNewClass(Model model) {

		Classes classes = new Classes();

		// get authenticated user details
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		UserDTO u = (UserDTO) authentication.getPrincipal();

		// get currant teacher details
		List<Teacher> teacherList = teacherService.findTeacherByUserId(u.getId());

		// get All Class Categories
		List<ClassCategory> categoryList = teacherService.getAllClassCategories();

		// get All Subjects
		List<Subject> subjectList = teacherService.getAllSubjects();

		// set attributes
		model.addAttribute("classes", classes);
		model.addAttribute("teacherList", teacherList);
		model.addAttribute("categoryList", categoryList);
		model.addAttribute("subjectList", subjectList);
		// Teacher teacherTest=teacherList.get(0);

		return "addClass";

	}

	// save new class
	@RequestMapping(value = "/saveclass", method = RequestMethod.POST)
	public String saveClass(@ModelAttribute("classes") Classes classes) {

		classes.setType("accepted");
		classes.setStatus("pending");
		classService.saveClass(classes);

		return "redirect:/myclasses";

	}

	// load search class page

	@RequestMapping("/findclass")
	public String findClass(Model model) {

		TeacherModel teacherModel = null;

		// get All Class Categories
		List<ClassCategory> categoryList = teacherService.getAllClassCategories();

		// get All Subjects
		List<Subject> subjectList = teacherService.getAllSubjects();

		// get all teachers
		List<User> userList = teacherService.findTeachers();

		List<TeacherModel> teacherModelList = new ArrayList<TeacherModel>();

		List<Classes> classList = new ArrayList<Classes>();
		List<Teacher> teacherList = new ArrayList<Teacher>();

		for (int i = 0; i < userList.size(); i++) {
			teacherModel = new TeacherModel();
			teacherList = teacherService.findTeacherByUserId(userList.get(i).getId());
			teacherModel.setUserId(userList.get(i).getId());
			teacherModel.setFirstName(userList.get(i).getFirstName());
			;
			teacherModel.setMiddleName(userList.get(i).getMiddlName());
			teacherModel.setLastName(userList.get(i).getLastName());
			teacherModel.setTeacherId(teacherList.get(0).getTeacherId());
			teacherModel.setClCategoryId(teacherList.get(0).getClCategoryId());
			teacherModel.setSubjectId(teacherList.get(0).getSubjectId());

			teacherModelList.add(teacherModel);

		}

		// set attributes
		model.addAttribute("categoryList", categoryList);
		model.addAttribute("subjectList", subjectList);
		model.addAttribute("teacherModelList", teacherModelList);
		model.addAttribute("classList", classList);

		return "searchclass";
	}

	// find classes

	@RequestMapping("/searchclass")
	public String searchClass(@RequestParam("clCategory") int clCategory, @RequestParam("subject") int subject,
			@RequestParam("teacher") int teacher, Model model) {

		List<Classes> classList = classService.searchClass(teacher, clCategory, subject);

		TeacherModel teacherModel = new TeacherModel();
		List<Integer> idList = new ArrayList<Integer>();
		idList.add(clCategory);
		idList.add(subject);
		idList.add(teacher);

		// get All Class Categories
		List<ClassCategory> categoryList = teacherService.getAllClassCategories();

		// get All Subjects
		List<Subject> subjectList = teacherService.getAllSubjects();

		// get all teachers
		List<User> userList = teacherService.findTeachers();

		List<TeacherModel> teacherModelList = new ArrayList<TeacherModel>();
		List<Teacher> teacherList = new ArrayList<Teacher>();

		for (int i = 0; i < userList.size(); i++) {
			teacherModel = new TeacherModel();
			teacherList = teacherService.findTeacherByUserId(userList.get(i).getId());
			teacherModel.setUserId(userList.get(i).getId());
			teacherModel.setFirstName(userList.get(i).getFirstName());
			
			teacherModel.setMiddleName(userList.get(i).getMiddlName());
			teacherModel.setLastName(userList.get(i).getLastName());
			teacherModel.setTeacherId(teacherList.get(0).getTeacherId());
			teacherModel.setClCategoryId(teacherList.get(0).getClCategoryId());
			teacherModel.setSubjectId(teacherList.get(0).getSubjectId());

			teacherModelList.add(teacherModel);

		}

		// set attributes
		model.addAttribute("categoryList", categoryList);
		model.addAttribute("subjectList", subjectList);
		model.addAttribute("teacherModelList", teacherModelList);
		model.addAttribute("idList", idList);
		model.addAttribute("classList", classList);
		// model.addAttribute("teacherTest", "123456");

		return "searchclass";
	}

	// load single class page student point of view
	@RequestMapping("/singleclass/student")
	public String getSingleClassById(@RequestParam("classId") int classId,@RequestParam("teacherId") int teacherId, Model model) {

		ClassJoin classJoin = new ClassJoin();

		// get currant date
		Date currentUtilDate = new Date();
		SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy/MM/dd");
		SimpleDateFormat timeFormatter = new SimpleDateFormat("HH:mm:ss");

		String paymentDate = dateFormatter.format(currentUtilDate);
		String paymentTime = timeFormatter.format(currentUtilDate.getTime());

		List<Classes> classList = classService.getClassById(classId);

		List<Teacher> teacher = teacherService.getTeacherById(classList.get(0).getTeacherId());
		Optional<User> user = userRepository.findById(teacher.get(0).getUserId());
		String teacherName = user.get().getFirstName() + " " + user.get().getMiddlName() + " "
				+ user.get().getLastName();

		model.addAttribute("teacherName", teacherName);
		model.addAttribute("classList", classList);

		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		UserDTO userDto = (UserDTO) authentication.getPrincipal();
		model.addAttribute("userDto", userDto);
		// Add record to classjoin table and make the status="PENDING"

		// set data to class join object
		classJoin.setClassId(classId);
		classJoin.setType("init");
		classJoin.setStatus("pending");
		classJoin.setAmmount(classList.get(0).getAmount());
		classJoin.setPaymentDate(paymentDate);
		classJoin.setPaymentTime(paymentTime);
		classJoin.setUserId(userDto.getId());
		classJoin.setBankSlip("-");
		classJoin.setTeacherId(teacherId);

		// save payment details
		ClassJoin newClassJoin = classJoinService.saveClassJoin(classJoin);

		// Return the classjoin table's cl_join_id like
		// model.addAttribute("classjoinid", cl_join_id);

		model.addAttribute("classJoinId", newClassJoin.getClJoinId());
		return "singleClass";
	}

	// join class

	@RequestMapping("/join")
	public String joinToClass(@RequestParam("classId") int classId, @RequestParam("clJoinId") int clJoinId) {

		// get authenticated user details
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		UserDTO u = (UserDTO) authentication.getPrincipal();

		// get currant date
		Date currentUtilDate = new Date();
		SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy/MM/dd");
		SimpleDateFormat timeFormatter = new SimpleDateFormat("HH:mm:ss");

		String paymentDate = dateFormatter.format(currentUtilDate);
		String paymentTime = timeFormatter.format(currentUtilDate.getTime());

		// set user name
		String userName = u.getFirstName() + " " + u.getMiddleName() + " " + u.getLastName();

		// get class details using class id
		List<Classes> classList = classService.getClassById(classId);

		try {
			// send email
			//sendEmail.sendEmail(u.getUsername(), userName);

			// save payment details
			classJoinService.updateClassJoin("complete", "online payed", clJoinId);

		} catch (MailException e) {
			System.out.println(e.getMessage());
		}

		return "redirect:/wall";
	}

	// load single class page teacher point of view
	@RequestMapping("/singleclass/teacher")
	public ModelAndView getTeacherSingleClassById(@RequestParam("classId") int classId, Model model) {

		float institutePresentage=0;
		int numOfJoined=0;
		float ammount=0;
		float totalAmmount=0;
		float instituteCharge=0;
		float profite;
		
		ModelAndView mav = new ModelAndView("singleClassTeacher");
		// get class details according to class id
		Classes classList = classService.getClassByClassId(classId);
		
		// get teacher details according to teacher id;
		List<Teacher> teacheList=teacherService.getTeacherById(classList.getTeacherId());
		
		//get class join list according class id and status=complete
		 numOfJoined=classJoinService.getClassesByStatus(classId, "complete");
		
		
		institutePresentage=teacheList.get(0).getInsChargePercentage();
		ammount=classList.getAmount();
		
		
		totalAmmount=numOfJoined*ammount;
		instituteCharge=(totalAmmount*institutePresentage)/100;
		profite=totalAmmount-instituteCharge;
		
		mav.addObject("class", classList);
	    model.addAttribute("numberOfJoined", numOfJoined);
	    model.addAttribute("totalAmmount", totalAmmount);
	    model.addAttribute("profite", profite);
	    model.addAttribute("instituteCharge", instituteCharge);

		return mav;
	}

	// load edit single class page
	@RequestMapping("/singleclass/edit")
	public ModelAndView getSingleClassToEdit(@RequestParam("classId") int classId) {

		ModelAndView mav = new ModelAndView("editSingleClass");

		Classes classList = classService.getClassByClassId(classId);

		mav.addObject("classes", classList);

		return mav;
	}
	
	 @PostMapping("/upload")
	    public String uploadFile(@RequestParam("file") MultipartFile file,@RequestParam("classId") int classId,@RequestParam("clJoinId") int clJoinId) {

		 
		// get authenticated user details
			Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
			UserDTO u = (UserDTO) authentication.getPrincipal();
         String filename="user_"+u.getId().toString()+"_class_"+classId+"_slip."+file.getOriginalFilename().split("\\.")[1];
	        
       

	        // save the file on the local file system
	        try {
	        	byte[] bytes = file.getBytes();
	            Path path = Paths.get(UPLOAD_DIR + filename);
	            Files.write(path, bytes);
	            
	            classJoinService.updateBankSlip("bank deposit",filename, clJoinId);
	        } catch (IOException e) {
	            e.printStackTrace();
	        }

	       

	        return "redirect:wall";
	    }
	 
	 
	 @RequestMapping("/bankslips")
	 public String classRequset(Model model) {
		 
		 ClassJoinModel classJoinModel=null;
		 List<ClassJoinModel> pendingSlipLsit=new ArrayList<ClassJoinModel>();
		 List<Classes> classList=new ArrayList<Classes>();
		 
			// get authenticated user details
				Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
				UserDTO u = (UserDTO) authentication.getPrincipal();
		 
				//get all classes
				   classList=classService.findAllClasses();
				   
				if(u.getUserType().equals("admin")|| u.getUserType().equals("data_entry") ) {
					
					  model.addAttribute("teacherModelList", getAllTeachers());
					 model.addAttribute("pendingSlipLsit", pendingSlipLsit);
					 model.addAttribute("classList", classList);
					 return "admin";
				}else {
					return "redirect:login";
				}
		
		 
	 }
	 
	 
	 // View Slip
	 @RequestMapping(value="/displayslip",method = RequestMethod.GET)
	   public @ResponseBody void affichimage(@RequestParam("bankSlip")String bankSlip,HttpServletResponse response,HttpServletRequest request) throws 
	      IOException,NullPointerException
	       {
	       
		 // get file extension from file name
          String slipType=bankSlip.split("\\.")[1];		 
          
          
          
          if(slipType.equals("pdf")) {
        	  
        	response.setContentType("application/pdf");
  	        
  	        InputStream inputStream = new FileInputStream(new File(UPLOAD_DIR+bankSlip));
  	        int nRead;
  	        while ((nRead = inputStream.read()) != -1) {
  	            response.getWriter().write(nRead);
  	        }
        	  
          }else {
        	  File imageFile = new File(UPLOAD_DIR+bankSlip);
   	       response.setContentType("image/jpeg");
   	        InputStream in=new FileInputStream(imageFile);
   	       IOUtils.copy(in, response.getOutputStream());
          }
		
	      
          
	       }
	 
	 @RequestMapping("/filterslips")
	 public String filterBankSlips(@RequestParam("status") String status,@RequestParam("teacherId") int teacherId ,@RequestParam("classId") int classId,Model model) {
		 
			String selectedTeacher;
			String selectedClass;
			 ClassJoinModel classJoinModel=null;
			 List<ClassJoinModel> pendingSlipLsit=new ArrayList<ClassJoinModel>();
			 List<Classes> classList=new ArrayList<Classes>();
			 
			// get authenticated user details
				Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
				UserDTO u = (UserDTO) authentication.getPrincipal();
		 
		 
			// check status

			if (status.equals("all")) {
				status = "";
			}

			// check teacher
			if (teacherId == 0) {
				selectedTeacher = "";
			} else {
				selectedTeacher = String.valueOf(teacherId);
			}
			// check class
			if (classId == 0) {
				selectedClass = "";
			} else {
				selectedClass = String.valueOf(classId);
			}
		 
		//get all classes
	   classList=classService.findAllClasses();
		 
		
	 
			if(u.getUserType().equals("admin")|| u.getUserType().equals("data_entry") ) {
				// filter
				 List<ClassJoin> bankSlips=classJoinService.filterBankSlips("bank deposit", status, selectedTeacher,selectedClass);
				 Optional<User> user=null;
				 List<Classes> classes=null;
				 List<Teacher> teacher=null;
				 for(int i=0;i<bankSlips.size();i++) {
					 classJoinModel=new ClassJoinModel();
					 user=userRepository.findById(bankSlips.get(i).getUserId());
					 classes=classService.getClassById(bankSlips.get(i).getClassId());
					 teacher=teacherService.getTeacherById(classes.get(0).getTeacherId());
					 
					 
					 classJoinModel.setClJoinId(bankSlips.get(i).getClJoinId());
					 classJoinModel.setStudentName(user.get().getFirstName()+" "+user.get().getMiddlName()+" "+user.get().getLastName());
					 classJoinModel.setBankSlip(bankSlips.get(i).getBankSlip());
					 classJoinModel.setDate(bankSlips.get(i).getPaymentDate());
					 classJoinModel.setClassName(classes.get(0).getDescriptionEnglish()+" / "+classes.get(0).getDescriptionSinhala());
					 classJoinModel.setAmmount(bankSlips.get(i).getAmmount());
					 classJoinModel.setStatus(bankSlips.get(i).getStatus());
					 
					 pendingSlipLsit.add(classJoinModel);
					
				 }
				 
				 model.addAttribute("teacherModelList", getAllTeachers());
				 model.addAttribute("classList", classList);
				 model.addAttribute("pendingSlipLsit", pendingSlipLsit);
				 return "admin";
			}else {
				return "redirect:login";
			}
	 
		 
		
		 
		
	
	 }
	 
	@RequestMapping(value = "/acceptslip" , method = RequestMethod.POST)
	public String acceptBankSlips(@RequestParam("clJoinId") int clJoinId) {
		
		classJoinService.updateBankSlipStatus("complete", clJoinId);
		return "redirect:bankslips";
	}
	
	//get all teachers
	
	public List<TeacherModel> getAllTeachers(){
		TeacherModel teacherModel = null;
		List<TeacherModel> teacherModelList = new ArrayList<TeacherModel>();
		List<Classes> classList = new ArrayList<Classes>();
		List<Teacher> teacherList = new ArrayList<Teacher>();
	 
		// get all teachers
		List<User> userList = teacherService.findTeachers();

		

		

		for (int i = 0; i < userList.size(); i++) {
			teacherModel = new TeacherModel();
			teacherList = teacherService.findTeacherByUserId(userList.get(i).getId());
			teacherModel.setUserId(userList.get(i).getId());
			teacherModel.setFirstName(userList.get(i).getFirstName());
			
			teacherModel.setMiddleName(userList.get(i).getMiddlName());
			teacherModel.setLastName(userList.get(i).getLastName());
			teacherModel.setTeacherId(teacherList.get(0).getTeacherId());
			teacherModel.setClCategoryId(teacherList.get(0).getClCategoryId());
			teacherModel.setSubjectId(teacherList.get(0).getSubjectId());

			teacherModelList.add(teacherModel);

		}
		
		return teacherModelList;
	}

}
