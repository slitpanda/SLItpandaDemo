package com.itpanda.tution.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.omg.CORBA.UserException;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.itpanda.tution.Constant;
import com.itpanda.tution.entity.ClassJoin;
import com.itpanda.tution.entity.Classes;
import com.itpanda.tution.loginSecurity.entity.User;
import com.itpanda.tution.loginSecurity.repository.UserRepository;
import com.itpanda.tution.model.ClassModel;
import com.itpanda.tution.model.UserDTO;
import com.itpanda.tution.model.UserModel;
import com.itpanda.tution.service.ClassJoinService;
import com.itpanda.tution.service.ClassService;
import com.itpanda.tution.service.StudentService;
import com.itpanda.tution.service.TeacherService;
import com.itpanda.tution.util.TimeFormattor;

@Controller
public class StudentController {

	@Autowired
	private StudentService studentService;

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private ClassJoinService classJoinService;

	@Autowired
	private ClassService classService;

	@Autowired
	private TeacherService teacherService;

	TimeFormattor timeFormattor = new TimeFormattor();

// save new student
	@RequestMapping(value = "/savestudent", method = RequestMethod.POST)
	public String saveStudent(@ModelAttribute("user") UserModel userModel) {
		User user = new User();
		int enabledUsers = 0;
		try {
			// copy user model object to user object
			BeanUtils.copyProperties(userModel, user);

			enabledUsers = userRepository.countEnabledUsers(userModel.getUsername());

			if (enabledUsers != 0) {
				return "redirect:/studentregister?register=email";
			} else {
				user.setUserType(Constant.USER_TYPE_STUDENT);
				user.setPassword(passGenerator(userModel.getPassword()));
				user.setEnabled(true);
				studentService.saveStudent(user);
				return "redirect:/?register=success";
			}

		} catch (Exception e) {
			System.out.println("student register : " + e);
			return "redirect:/studentregister?register=error";
		}

	}

	@RequestMapping(value = "/updateprofile/student", method = RequestMethod.POST)
	public String editProfile(@ModelAttribute("user") User user) {
		String password = user.getPassword();

		// get authenticated user details
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		UserDTO u = (UserDTO) authentication.getPrincipal();

		try {
			user.setId(u.getId());
			user.setUserType(Constant.USER_TYPE_STUDENT);
			user.setEnabled(true);

			// check password
			if (password.equals("")) {
				// currnt password
				user.setPassword(u.getPassword());

			} else {
				// new password
				user.setPassword(passGenerator(password));
			}

			userRepository.save(user);
			return "redirect:/wall?update=success";
		} catch (Exception e) {
			System.out.println("student profile edit: " + e);
			return "redirect:/editprofile/student/" + u.getId() + "?update=error";
		}

	}

	@RequestMapping("/joinedclasses")
	public String studentJoinedClasses(Model model) {

		List<ClassModel> joinClassesList = new ArrayList<ClassModel>();
		Optional<Classes> classDetails;
		ClassModel classModel = null;
		Optional<User> userDetails;
		// UserModel userModel=new UserModel();
		// model.addAttribute("user",userModel);
		// get authenticated user details
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		UserDTO u = (UserDTO) authentication.getPrincipal();

		List<ClassJoin> joinedClassesId = classJoinService.getJoindClassByUserId(u.getId(),
				Constant.CL_JOIN_STATUS_COMPLETE);

		for (int i = 0; i < joinedClassesId.size(); i++) {
			classModel = new ClassModel();
			classDetails = Optional
					.ofNullable(classService.getClassByClassId(joinedClassesId.get(i).getClasses().getClassId()));
			userDetails = userRepository.findById(teacherService
					.getTeacherById(classDetails.get().getTeacher().getTeacherId()).get(0).getUser().getId());

			classModel.setClassId(classDetails.get().getClassId());
			classModel.setDate(timeFormattor.dateToString(classDetails.get().getDate()));
			classModel.setStartTime(timeFormattor.javaSqlTimeToString(classDetails.get().getStartTime()));
			classModel.setEndTime(timeFormattor.javaSqlTimeToString(classDetails.get().getEndTime()));

			classModel.setDescriptionEnglish(classDetails.get().getDescriptionEnglish());
			classModel.setDescriptionSinhala(classDetails.get().getDescriptionSinhala());
			classModel.setTeacherId(classDetails.get().getTeacher().getTeacherId());
			classModel.setAmount(classDetails.get().getAmount());
			classModel.setTeacher(userDetails.get().getFirstName() + " " + userDetails.get().getMiddlName() + " "
					+ userDetails.get().getLastName());
			classModel.setSubjectName(teacherService.getSubjectById(
					teacherService.getTeacherById(classDetails.get().getTeacher().getTeacherId()).get(0).getSubjectId())
					.get().getSubjectName());
			classModel.setJoinUrl(classDetails.get().getJoinUrl());
			classModel.setTeacherId(classDetails.get().getTeacher().getTeacherId());
			joinClassesList.add(classModel);

		}

		model.addAttribute("joinClassesList", joinClassesList);
		return "studentJoinedClasses";

	}

//for encode a string

	public String passGenerator(String password) {
		BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder(4);
		return bCryptPasswordEncoder.encode(password);
	}
}
