package com.itpanda.tution;

import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHeaders;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;


@Service
public class ZoomCaller {
	public static String ZOOM_USER_EXIST_URL="https://api.zoom.us/v2/users/";
	public static String ZOOM_JWT="eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOm51bGwsImlzcyI6InJCNGREZVZyUzVHVUsxX0cxNWFOdGciLCJleHAiOjE2MDkzOTQ0MDAsImlhdCI6MTU5ODYwMjE3MH0.a8c920GAu3uIpZVqfJOr46j9sjxRzzGVBrJ9f0HCQKw";
	
	private final CloseableHttpClient httpClient = HttpClients.createDefault();
	
	
	
	private void sendPost() throws Exception {

        HttpPost post = new HttpPost("https://httpbin.org/post");

        // add request parameter, form parameters
        List<NameValuePair> urlParameters = new ArrayList<>();
        urlParameters.add(new BasicNameValuePair("username", "abc"));
        urlParameters.add(new BasicNameValuePair("password", "123"));
        urlParameters.add(new BasicNameValuePair("custom", "secret"));

        post.setEntity(new UrlEncodedFormEntity(urlParameters));

        try (CloseableHttpClient httpClient = HttpClients.createDefault();
             CloseableHttpResponse response = httpClient.execute(post)) {

            System.out.println(EntityUtils.toString(response.getEntity()));
        }

    }
	
	
	public String createZoomMeeting()  {
		String result=null;
		boolean test=true;
		if(test)
			return ZoomCaller.TEMP_RESPONSE; // ZoomCaller.TEMP_ERROR_RESPONSE; //ZoomCaller.TEMP_RESPONSE;
		
		try {
		String payload = "data={" +
                "\"username\": \"admin\", " +
                "\"first_name\": \"System\", " +
                "\"last_name\": \"Administrator\"" +
                "}";
		
		String payLoad2="{\r\n" + 
				"  \"topic\": \"Organic chemistry part 3\",\r\n" + 
				"  \"type\": \"2\",\r\n" + 
				"  \"start_time\": \"2020-12-16T09:30:00\",\r\n" + 
				"  \"duration\": \"90\",\r\n" + 
				"  \"agenda\": \"Organic chemistry part 444 - Discuss past papers \",\r\n" + 
				"  \r\n" + 
				"  \"settings\": {\r\n" + 
				"    \"host_video\": \"true\",\r\n" + 
				"    \"participant_video\": \"true\",\r\n" + 
				"    \"join_before_host\": \"true\",\r\n" + 
				"    \"mute_upon_entry\": \"true\",\r\n" + 
				"	\"waiting_room\": false,\r\n" + 
				"    \"audio\": \"voip\",\r\n" + 
				"    \"auto_recording\": \"none\",\r\n" + 
				"    \"alternative_hosts\": \"lasanthals@gmail.com\"\r\n" + 
				"  }\r\n" + 
				"}";
        StringEntity entity = new StringEntity(payLoad2,
                ContentType.APPLICATION_FORM_URLENCODED);

        HttpClient httpClient = HttpClientBuilder.create().build();
       // HttpPost request = new HttpPost("http://localhost:8080/register");
        HttpPost request = new HttpPost("https://api.zoom.us/v2/users/onlinetution.lk@gmail.com/meetings");
        
        request.setEntity(entity);
        
        request.setHeader("Accept", "application/json");
        request.setHeader("Content-type", "application/json");
        request.setHeader("Authorization","Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOm51bGwsImlzcyI6InJCNGREZVZyUzVHVUsxX0cxNWFOdGciLCJleHAiOjE2MDkzOTQ0MDAsImlhdCI6MTU5ODYwMjE3MH0.a8c920GAu3uIpZVqfJOr46j9sjxRzzGVBrJ9f0HCQKw");

        HttpResponse response = httpClient.execute(request);
        System.out.println(EntityUtils.toString(response.getEntity()));
        result=EntityUtils.toString(response.getEntity());
		}catch(Exception ex) {
		
			ex.printStackTrace();
			return null;
		}
        return result;
	}
	
	private String getZoomJwtToken() {
		return ZOOM_JWT;
	}

	public boolean isZoomUserExists(String email) {
		// String urlWithParam=ZoomUserExistsURL+"onlinetution.lk@gmail.com";
		String urlWithParam = ZOOM_USER_EXIST_URL + email;
		HttpGet request = new HttpGet(urlWithParam);
		request.setHeader("Authorization", "Bearer " + getZoomJwtToken());

		String result = null;
		try (CloseableHttpResponse response = httpClient.execute(request)) {
			// Get HttpResponse Status
			System.out.println(response.getStatusLine().toString());
			HttpEntity entity = response.getEntity();
			Header headers = entity.getContentType();
			System.out.println(headers);
			if (entity != null) {
				// return it as a String
				result = EntityUtils.toString(entity);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			return false;
		}

		if (result != null && result.length() > 1) {

			ZoomCheckUserResult zoomObj = null;
			try {
				ObjectMapper objectMapper = new ObjectMapper();

				// read json file and convert to customer object
				zoomObj = objectMapper.readValue(result, ZoomCheckUserResult.class);
				if (zoomObj != null && zoomObj.getId() != null && zoomObj.getId().length() > 1) {
					return true;
				}
			} catch (Exception ex) {
				return false;
			}
		} else {
			return false;
		}

		return false;
	}
	
	public String createZoomUser(String emali,String firstName,String lastName) {
		String result=null;
		try {
			
			
			String payLoad2="{\r\n" + 
					"  \"action\": \"custCreate\",\r\n" + 
					"  \"user_info\": {\r\n" + 
					"    \"email\": \"onlinetution111.lk@gmail.com\",\r\n" + 
					"    \"type\": 1,\r\n" + 
					"    \"first_name\": \"Saman\",\r\n" + 
					"    \"last_name\": \"Edirisingha\"\r\n" + 
					"  }\r\n" + 
					"}";
	        StringEntity entity = new StringEntity(payLoad2,
	                ContentType.APPLICATION_FORM_URLENCODED);

	        HttpClient httpClient = HttpClientBuilder.create().build();
	       // HttpPost request = new HttpPost("http://localhost:8080/register");
	        HttpPost request = new HttpPost("https://api.zoom.us/v2/users");
	        
	        request.setEntity(entity);
	        
	        request.setHeader("Accept", "application/json");
	        request.setHeader("Content-type", "application/json");
	        request.setHeader("Authorization","Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOm51bGwsImlzcyI6InJCNGREZVZyUzVHVUsxX0cxNWFOdGciLCJleHAiOjE2MDkzOTQ0MDAsImlhdCI6MTU5ODYwMjE3MH0.a8c920GAu3uIpZVqfJOr46j9sjxRzzGVBrJ9f0HCQKw");

	        HttpResponse response = httpClient.execute(request);
	        //System.out.println(EntityUtils.toString(response.getEntity()));
	        result=EntityUtils.toString(response.getEntity());
	        
			}catch(Exception ex) {
				ex.printStackTrace();
				return "Error occured";
			}
		
		
		if (result != null && result.length() > 1) {

			ZoomCheckUserResult zoomObj = null;
			try {
				ObjectMapper objectMapper = new ObjectMapper();

				// read json file and convert to customer object
				zoomObj = objectMapper.readValue(result, ZoomCheckUserResult.class);
				if (zoomObj != null && zoomObj.getId() != null && zoomObj.getId().length() > 1) {
					return "Success";
				}
			} catch (Exception ex) {
				return "Error occured";
			}
		} else {
			return "Failed";
		}
	    return "Failed";
	}
	
	public static String  TEMP_RESPONSE="{\r\n" + 
			"    \"uuid\": \"0p9Vc7hbRU+L/M71/ZvwyA==\",\r\n" + 
			"    \"id\": 81390168688,\r\n" + 
			"    \"host_id\": \"iYY7ywDuR52iet-gjdxxJg\",\r\n" + 
			"    \"host_email\": \"onlinetution.lk@gmail.com\",\r\n" + 
			"    \"topic\": \"Organic chemistry part 44\",\r\n" + 
			"    \"type\": 2,\r\n" + 
			"    \"status\": \"waiting\",\r\n" + 
			"    \"start_time\": \"2020-12-26T17:30:00Z\",\r\n" + 
			"    \"duration\": 90,\r\n" + 
			"    \"timezone\": \"America/Los_Angeles\",\r\n" + 
			"    \"agenda\": \"Organic chemistry part 3 - Discuss past papers \",\r\n" + 
			"    \"created_at\": \"2020-09-02T14:01:31Z\",\r\n" + 
			"    \"start_url\": \"https://us02web.zoom.us/s/81390168688?zak=eyJ6bV9za20iOiJ6bV9vMm0iLCJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJjbGllbnQiLCJ1aWQiOiJpWVk3eXdEdVI1MmlldC1namR4eEpnIiwiaXNzIjoid2ViIiwic3R5Ijo5OSwid2NkIjoidXMwMiIsImNsdCI6MCwic3RrIjoiSm5KRU5QbEgtYnJtUmUzOHZaZmw3ZGZuNFdicEh5aHFWRl9Jc2E2dk9ZZy5CZ1VzY1hOamVWZzNSa3h5V1daTmF6QlpaRUpyT1doNGJrRndObUpHVDBWdlEyd3dTRUZWYkVnclRUQnliejBBQUF3elEwSkJkVzlwV1ZNemN6MEFCSFZ6TURJIiwiZXhwIjoxNjA2ODMxMjkxLCJpYXQiOjE1OTkwNTUyOTEsImFpZCI6ImQ2eEJyVXVLVE5Ddndsb0Q2VnRyUFEiLCJjaWQiOiIifQ.sZwij__L6zQDP5_QQQnafi1JNR901loNzCHM73KQfLU\",\r\n" + 
			"    \"join_url\": \"https://us02web.zoom.us/j/81390168688?pwd=N0hPYkpxRlBxai9yZk81dzgvS21qUT09\",\r\n" + 
			"    \"password\": \"597168\",\r\n" + 
			"    \"h323_password\": \"597168\",\r\n" + 
			"    \"pstn_password\": \"597168\",\r\n" + 
			"    \"encrypted_password\": \"N0hPYkpxRlBxai9yZk81dzgvS21qUT09\",\r\n" + 
			"    \"settings\": {\r\n" + 
			"        \"host_video\": true,\r\n" + 
			"        \"participant_video\": true,\r\n" + 
			"        \"cn_meeting\": false,\r\n" + 
			"        \"in_meeting\": false,\r\n" + 
			"        \"join_before_host\": true,\r\n" + 
			"        \"mute_upon_entry\": true,\r\n" + 
			"        \"watermark\": false,\r\n" + 
			"        \"use_pmi\": false,\r\n" + 
			"        \"approval_type\": 2,\r\n" + 
			"        \"audio\": \"voip\",\r\n" + 
			"        \"auto_recording\": \"none\",\r\n" + 
			"        \"enforce_login\": false,\r\n" + 
			"        \"enforce_login_domains\": \"\",\r\n" + 
			"        \"alternative_hosts\": \"lasanthals@gmail.com\",\r\n" + 
			"        \"close_registration\": false,\r\n" + 
			"        \"registrants_confirmation_email\": true,\r\n" + 
			"        \"waiting_room\": false,\r\n" + 
			"        \"request_permission_to_unmute_participants\": false,\r\n" + 
			"        \"registrants_email_notification\": true,\r\n" + 
			"        \"meeting_authentication\": false\r\n" + 
			"    }\r\n" + 
			"}";

	public static String TEMP_ERROR_RESPONSE="{\r\n" + 
			"    \"code\": 124,\r\n" + 
			"    \"message\": \"The Token's Signature resulted invalid when verified using the Algorithm: HmacSHA256\"\r\n" + 
			"}";
}
